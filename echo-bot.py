import telebot
import keyboards
import fsm
import ai
import loguru
import yaml
import sys

logger = loguru.logger

# load config
try:
    with open("./config.yaml", 'r') as file: # –ó–¥–µ—Å—å, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –¥–æ–ø. –Ω–∞–≥—Ä—É–∑–∫–∏, —Å–¥–µ–ª–∞–µ–º 
        # –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        cfg = yaml.safe_load(file)
        logger.info("–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥")
except Exception as e:
    logger.warning("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ ({})", str(e))
    sys.exit(1) # –î–æ–±–∞–≤–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

BOT_TOKEN = cfg['telegram_token']
stater = fsm.FSM()
ai_service = ai.AI(cfg)
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)


def handle_default_state(message):
    if message.text == "–§–æ—Ç–æ üñº":
        stater.set_state(message.chat.id, fsm.IMAGE_STATE)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ", reply_markup=keyboards.back)
    elif message.text == "–¢–µ–∫—Å—Ç üìù":
        stater.set_state(message.chat.id, fsm.TEXT_STATE)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–æ, –æ —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –º–µ–Ω—è —Å–ø—Ä–æ—Å–∏—Ç—å", reply_markup=keyboards.back)
    else:
        return_to_menu(message.chat.id)

def handle_image_state(message):
    if message.text == "‚óÄÔ∏è –í –º–µ–Ω—é":
        return_to_menu(message.chat.id)
    else:
        try:
            msg = bot.send_message(chat_id=message.chat.id, text="–ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
            image_url = ai_service.generate_image(message.text)
            bot.delete_message(chat_id=message.chat.id, message_id=msg.id)
            bot.send_photo(chat_id=message.chat.id, caption="–í–∞—à–µ —Ñ–æ—Ç–æ:", photo=image_url)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ({str(e)})")

def handle_text_state(message):
    if message.text == "‚óÄÔ∏è –í –º–µ–Ω—é":
        ai_service.clear_dialog(message.chat.id)
        return_to_menu(message.chat.id)
    else:
        msg = bot.send_message(message.chat.id, "–î—É–º–∞—é –Ω–∞–¥ –∑–∞–ø—Ä–æ—Å–æ–º ...")
        txt = ai_service.generate_text(message.text, message.chat.id)
        msg = bot.edit_message_text(text=txt, chat_id=message.chat.id, message_id=msg.id)

def return_to_menu(chat_id):
    stater.set_state(chat_id, fsm.DEFAULT_STATE)
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.start)

@bot.message_handler(func=lambda message: True) 
def on_message(message): 
    state = stater.get_state(message.chat.id)

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{}:{}] –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '{}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {}",
        message.chat.id,
        message.from_user.first_name, 
        message.text,
        state 
    )
    if state == fsm.DEFAULT_STATE:
        handle_default_state(message)
    elif state == fsm.IMAGE_STATE:
        handle_image_state(message)
    elif state == fsm.TEXT_STATE:
        handle_text_state(message)
    else:
        return_to_menu(message.chat.id)
    
bot.polling()